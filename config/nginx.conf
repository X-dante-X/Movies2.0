events {}

http {
    lua_package_path "/usr/local/lib/lua/?.lua;;";

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=graphql_cache:10m max_size=100m inactive=60m use_temp_path=off;

    upstream movie_service {
        server moviesservice:8080;
    }

    upstream auth_service {
        server authservice:8080;
    }

    server {
        listen 80;

        location ^~ /auth/ {
            rewrite ^/auth(/.*)$ $1 break;
            proxy_pass http://auth_service;
            proxy_set_header Authorization $http_authorization;
        }

        location /movie {
            proxy_cache graphql_cache;
            proxy_cache_valid 200 302 30m;
            proxy_cache_valid 404 10m;
            proxy_ignore_headers Cache-Control Expires Set-Cookie;

            proxy_pass http://movie_service/graphql;

            access_by_lua_block {
                ngx.req.read_body()  -- Read the request body
                local body = ngx.req.get_body_data()
                if not body then
                    local body_file = ngx.req.get_body_file()
                    if body_file then
                        local file = io.open(body_file, "r")
                        if file then
                            body = file:read("*all")
                            file:close()
                        end
                    end
                end

                local auth_token = ngx.var.http_authorization
                ngx.log(ngx.ERR, "Authorization Token: ", auth_token or "No Authorization Token")

                -- Check if the request is a mutation or query
                local is_mutation = body and body:match("%s*mutation%s")

                -- If its a query, skip authorization check and continue
                if not is_mutation then
                    ngx.log(ngx.ERR, "Skipping authorization for query request")
                    return
                end

                -- If its a mutation, we need to check for the authorization token
                if not auth_token then
                    ngx.log(ngx.ERR, "Authorization token is missing")
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("401 Unauthorized: Missing Authorization Token")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                auth_token = auth_token:match("Bearer%s+(.*)")

                local res = ngx.location.capture("/auth/validate", {
                    method = ngx.HTTP_POST,
                    body = '{"token": "' .. auth_token .. '"}',
                    headers = {
                        ["Content-Type"] = "application/json"
                    }
                })

                if res.status ~= ngx.HTTP_OK then
                    ngx.log(ngx.ERR, "Authorization failed")
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("401 Unauthorized: Invalid Token")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local validate_response = {}
                local response = res.body

                if response then
                    local role_start = response:find('"role":"')
                    if role_start then
                        local role_end = response:find('"', role_start + 8)
                        if role_end then
                            validate_response.role = response:sub(role_start + 8, role_end - 1)
                        end
                    end
                end

                local user_role = validate_response.role
                ngx.log(ngx.ERR, "User Role: ", user_role)

                if user_role ~= "admin" then
                    ngx.log(ngx.ERR, "BLOCKING MUTATION: ", body)
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say("403 Forbidden: Mutations are only allowed for admins")
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }
        }
    }
}